require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ = require('../..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

require('mochawait');

var _helpers = require('./helpers');

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('exec', function () {
  it('should work with arguments like spawn', function callee$1$0() {
    var cmd, args, _ref, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = 'ls';
          args = [__dirname];
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, args));

        case 4:
          _ref = context$2$0.sent;
          stdout = _ref.stdout;
          stderr = _ref.stderr;
          code = _ref.code;

          stdout.should.contain("exec-specs.js");
          stderr.should.equal("");
          code.should.equal(0);

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should throw an error with a bad exit code', function callee$1$0() {
    var cmd, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("bad_exit.sh");
          err = undefined;
          context$2$0.prev = 2;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd));

        case 5:
          context$2$0.next = 10;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](2);

          err = context$2$0.t0;

        case 10:
          should.exist(err);
          err.stdout.trim().should.equal("foo");
          err.stderr.trim().should.equal("bar");
          err.code.should.equal(1);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[2, 7]]);
  });

  it('should work with spaces in arguments', function callee$1$0() {
    var cmd, echo1, echo2, _ref2, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo.sh");
          echo1 = "my name is bob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref2 = context$2$0.sent;
          stdout = _ref2.stdout;
          stderr = _ref2.stderr;
          code = _ref2.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should work with backslashes in arguments', function callee$1$0() {
    var cmd, echo1, echo2, _ref3, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo.sh");
          echo1 = "my\\ name\\ is\\ bob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref3 = context$2$0.sent;
          stdout = _ref3.stdout;
          stderr = _ref3.stderr;
          code = _ref3.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should work with spaces in commands', function callee$1$0() {
    var cmd, echo1, echo2, _ref4, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo with space.sh");
          echo1 = "my name is bob";
          echo2 = "lol";
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, [echo1, echo2]));

        case 5:
          _ref4 = context$2$0.sent;
          stdout = _ref4.stdout;
          stderr = _ref4.stderr;
          code = _ref4.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should respect cwd', function callee$1$0() {
    var cmd, echo1, echo2, cwd, _ref5, stdout, stderr, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = "./echo.sh";
          echo1 = "my name is bob";
          echo2 = "lol";
          cwd = _path2['default'].dirname((0, _helpers.getFixture)("echo.sh"));
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, [echo1, echo2], { cwd: cwd }));

        case 6:
          _ref5 = context$2$0.sent;
          stdout = _ref5.stdout;
          stderr = _ref5.stderr;
          code = _ref5.code;

          stdout.trim().should.equal(echo1);
          stderr.trim().should.equal(echo2);
          code.should.equal(0);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should respect env', function callee$1$0() {
    var cmd, env, _ref6, stdout, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("env.sh");
          env = { FOO: "lolol" };
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, [], { env: env }));

        case 4:
          _ref6 = context$2$0.sent;
          stdout = _ref6.stdout;
          code = _ref6.code;

          stdout.trim().should.equal(env.FOO + ' ' + env.FOO);
          code.should.equal(0);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should allow a timeout parameter', function callee$1$0() {
    var cmd, args, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = "sleep";
          args = ["10"];
          err = undefined;
          context$2$0.prev = 3;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, args, { timeout: 500 }));

        case 6:
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](3);

          err = context$2$0.t0;

        case 11:
          should.exist(err);
          err.message.should.contain("timed out");
          err.message.should.contain(cmd);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[3, 8]]);
  });

  it('should allow large amounts of output', function callee$1$0() {
    var _ref7, stdout;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _.exec)((0, _helpers.getFixture)("bigbuffer.js")));

        case 2:
          _ref7 = context$2$0.sent;
          stdout = _ref7.stdout;

          stdout.length.should.be.above(512 * 1024);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should ignore output if requested', function callee$1$0() {
    var cmd, echo1, _ref8, stdout, code;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cmd = (0, _helpers.getFixture)("echo.sh");
          echo1 = "my name is bob";
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _.exec)(cmd, [echo1], { ignoreOutput: true }));

        case 4:
          _ref8 = context$2$0.sent;
          stdout = _ref8.stdout;
          code = _ref8.code;

          stdout.should.equal("");
          code.should.equal(0);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,